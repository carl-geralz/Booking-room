services:
  spring-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring-app
    networks:
      - app-network
    environment:
      SPRING_APPLICATION_NAME: challenge-booking-room
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/challengebookingroom_db
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver

      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_OPEN_IN_VIEW: "true"
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: "true"
      SPRING_JPA_PROPERTIES_HIBERNATE_HIGHLIGHT_SQL: "true"
      SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_TIME_ZONE: Asia/Jakarta

      SPRING_JACKSON_TIME_ZONE: Asia/Jakarta

      SERVER_PORT: 8081
      SERVER_ERROR_INCLUDE_STACKTRACE: never

      JWT_SECRET: Y2hhbGxlbmdlLWJvb2tpbmctcm9vbQ==
      JWT_ISSUER: Enigma
      JWT_EXPIRATION: 86400

      USERNAME_SUPER_ADMIN: superadmin
      PASSWORD_SUPER_ADMIN: c3VwZXJhZG1pbnJvb20=

      # Prometheus and Monitoring
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: prometheus
      MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED: "true"

      # Mail-Sender config
      API_KEY_PUBLIC: e06998b5898e775f0c82335db2e5798e
      API_KEY_SECRET: ce772ea24e8d90aa0cc18d43a5bb0a8e
      API_MAIL_SENDER: razahdedenginanjar@gmail.com
      API_MAIL_ADMIN: ginanjar.razah24@gmail.com
      API_URL_SERVER: http://spring-app:8081

      # Swagger config
      SPRINGDOC_SWAGGER_UI_PATH: /swagger-ui.html

    depends_on:
      - postgres
    ports:
      - 8081:8081
    volumes:
      - ./logs:/var/logs/challenge-booking-room
    restart: unless-stopped

  postgres:
    image: postgres:14
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: challengebookingroom_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    expose:
      - 5432

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network
    restart: unless-stopped
  
  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - app-network
    restart: unless-stopped
  
  grafana:
    image: grafana/grafana
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: 'admin'
    networks:
      - app-network
    restart: unless-stopped

  spring-zrok:
    image: openziti/zrok
    restart: "no"
    volumes:
      - $HOME/.zrok:/.zrok
    environment:
      PFXLOG_NO_JSON: "true"
    entrypoint:
      - /bin/sh
      - -c
      - |
        zrok enable RBgZVgsh5nNn &&
        zrok share public http://spring-app:8081 --headless
    container_name: spring-zrok
    depends_on:
      - spring-app
    networks:
      - app-network

  # UNCOMMENT ME TO ACCESS GRAFANA
  # grafana-zrok:
  #   image: openziti/zrok
  #   restart: "no"
  #   volumes:
  #     - $HOME/.zrok:/.zrok
  #   environment:
  #     PFXLOG_NO_JSON: "true"
  #   entrypoint: 
  #     - /bin/sh
  #     - -c
  #     - |
  #       zrok enable RBgZVgsh5nNn &&
  #       zrok share public http://grafana:3000 --headless
  #   container_name: grafana-zrok
  #   depends_on:
  #     - grafana
  #   networks:
  #     - app-network

  trufflehog:
    build:
      context: .
      dockerfile: Dockerfile.trufflehog
    volumes:
      - ./trufflehog_reports:/app/trufflehog_reports
    depends_on:
      - spring-app
    command:
      ["sh", "-c", "trufflehog --repo_path . --json https://github.com/carl-geralz/Booking-room > /app/trufflehog_reports/trufflehog_report.json"]

    # restart: 
    #   always

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/conf.d/default.conf
  #   ports:
  #     - "80:80"
  #   networks:
  #     - app-network
  #   depends_on:
  #     - spring-app
  #     - prometheus
  #     - grafana
  #   restart: unless-stopped

  # nginx-zrok:
  #   image: openziti/zrok
  #   restart: "no"
  #   volumes:
  #     - $HOME/.zrok:/.zrok
  #   environment:
  #     PFXLOG_NO_JSON: "true"
  #   entrypoint: 
  #     - /bin/sh
  #     - -c
  #     - |
  #       zrok enable RBgZVgsh5nNn &&
  #       zrok share public http://nginx --headless
  #   container_name: nginx-zrok
  #   depends_on:
  #     - nginx
  #   networks:
  #     - app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    container_name: elasticsearch
    ports:
      - "9200:9200"
    networks:
      - elk

  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.2
    container_name: logstash
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"  # for receiving logs from Filebeat
      - "5000:5000"  # for TCP input
    networks:
      - elk

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.2
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - elk

  filebeat:
    build:
      context: .
      dockerfile: Dockerfile.filebeat
    container_name: filebeat
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml
    depends_on:
      - logstash
    networks:
      - elk
      - app-network

  kibana-zrok:
    image: openziti/zrok
    restart: "no"
    volumes:
      - $HOME/.zrok:/.zrok
    environment:
      PFXLOG_NO_JSON: "true"
    entrypoint: 
      - /bin/sh
      - -c
      - |
        zrok enable RBgZVgsh5nNn &&
        zrok share public http://kibana:5601 --headless
    container_name: kibana-zrok
    depends_on:
      - kibana
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
  elk:
    driver: bridge

volumes:
  pgdata:
