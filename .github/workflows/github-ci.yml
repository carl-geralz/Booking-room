name: CI/CD Pipeline

on:
  push:
    branches:
      - devops
  pull_request:
    branches:
      - devops

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: challengebookingroom_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Install dependencies
        run: mvn dependency:resolve

      - name: Build the project
        run: mvn package -DskipTests -DskipCompile

      - name: Build Docker image
        run: docker build -t challenge-booking-room:latest .

      - name: Docker login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker tag challenge-booking-room:latest ${{ secrets.DOCKER_USERNAME }}/challenge-booking-room:latest &&
              docker push ${{ secrets.DOCKER_USERNAME }}/challenge-booking-room:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy with Docker Compose
        run: |
          docker compose -f docker-compose.yml up -d --build

  # analyze-vuln:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #     - name: Analyze for critical and high CVEs
  #       id: docker-scout-cves
  #       if: ${{ github.event_name != 'pull_request_target' }}
  #       uses: docker/scout-action@v1
  #       with:
  #         command: cves
  #         image: ${{ steps.meta.outputs.tags }}
  #         sarif-file: sarif.output.json
  #         summary: true

  #     - name: Upload SARIF result
  #       id: upload-sarif
  #       if: ${{ github.event_name != 'pull_request_target' }}
  #       uses: github/codeql-action/upload-sarif@v2
  #       with:
  #         sarif_file: sarif.output.json